// @flow

/**
 * @deprecated
 */
export type CustomDimensionIdx =
  | 1
  | 2
  | 3
  | 4
  | 5
  | 6
  | 7
  | 8
  | 9
  | 10
  | 11
  | 12
  | 13
  | 14
  | 15
  | 16
  | 17
  | 18
  | 19
  | 20
  | 24
  | 25
  | 26;
/**
 * @deprecated
 */
declare export var CD_WEBAPP_INSTALLED: 4;
/**
 * @deprecated
 */
declare export var CD_NOVUM_UID: 7;
/**
 * @deprecated
 */
declare export var CD_EVENT_VALUE: 8;
declare type LegacyAnalyticsEvent = {
  /**
   * Typically the object that was interacted with (e.g. 'Video')
   */
  category: string,

  /**
   * The type of interaction (e.g. 'play')
   */
  action: string,

  /**
   * Useful for categorizing events (e.g. 'Fall Campaign')
   */
  label?: string,

  /**
   * A numeric value associated with the event (e.g. 43)
   */
  value?: number,

  /**
   * Screen name where the event happened.
   * If not specified, native app will use value from the latest setScreenName() call
   */
  screenName?: string,

  /**
   * Other properties are allowed
   */
  [key: string]: any,
};
declare type FirebaseEvent = {
  name: string,
  component_type?: string,
  component_copy?: string,
  [key: string]: any,
};
export type TrackingEvent = $ReadOnly<LegacyAnalyticsEvent | FirebaseEvent>;
declare export var sanitizeAnalyticsParam: (str: string) => string;
declare export var sanitizeAnalyticsParams: (params: {
  [key: string]: mixed,
}) => {
  [key: string]: mixed,
};
declare type LogEventOptions = {
  /**
   * Whether to sanitize the event params, this only affects to FirebaseEvents. true by default.
   */
  sanitize?: boolean,
};
declare export var logEvent: (
  event: TrackingEvent,
  options?: LogEventOptions | void
) => Promise<void>;
declare export var logEcommerceEvent: (
  name: string,
  params: {
    [key: string]: any,
  }
) => Promise<void>;
declare export var logTiming: (
  x: $ReadOnly<{
    category?: string | void,
    variable: string,
    value: number,
    label?: string | void,
  }>
) => Promise<void>;
declare export var setScreenName: (
  screenName: string,
  params?: {
    [key: string]: any,
  }
) => Promise<void>;
declare type KnownUserPropertyName =
  | "obIds"
  | "paymentModels"
  | "serviceWorkerStatus"
  | "isAdmin"
  | "hasIpComms"
  | "af_source"
  | "af_campaign"
  | "novum_uid_session"
  | "user_logged"
  | "currentSubscriptionId"
  | "currentSubscriptionType"
  | "currentPaymentModel"
  | "webviewBrowserVersion"
  | "activatedRoles"
  | "appInstanceId"
  | "experimentflag"
  | "friendsApps"
  | "accountLineSelector"
  | "OneClickDisplayed";
declare export var setUserProperty: (
  name: KnownUserPropertyName | string,
  value: string
) => Promise<void>;
declare export var setCustomerHash: (hash: string) => Promise<void>;
declare export var getCustomerHash: () => Promise<{
  hash: string,
}>;
declare export var setTrackingProperty: (
  system: "palitagem" | "medallia",
  name: string,
  value?: string | void
) => Promise<void>;
declare export {};
