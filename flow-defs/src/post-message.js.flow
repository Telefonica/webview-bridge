// @flow

/**
 * There are two possible kind of messages we can receive from native app:
 *     - RequestsFromNativeApp: native app initiates the dialog
 *     - ResponsesFromNativeApp: native app responds to a request initiated by the web
 */
declare type RequestsFromNativeApp = {
  NATIVE_EVENT: {
    type: "NATIVE_EVENT",
    id: string,
    payload: {
      event: string,
    },
  },
  SESSION_RENEWED: {
    type: "SESSION_RENEWED",
    id: string,
    payload: {
      accessToken: string,
    },
  },
};
export type SheetResponse = {
  action: "SUBMIT" | "DISMISS",
  result: Array<{
    id: string,
    selectedIds: Array<string>,
  }>,
};
export type ResponsesFromNativeApp = {
  SIM_ICC: {
    id: string,
    type: "SIM_ICC",
    payload: {
      icc: string,
    },
  },
  IMEI: {
    id: string,
    type: "IMEI",
    payload: {
      imei: string,
    },
  },
  IMSI: {
    id: string,
    type: "IMSI",
    payload: {
      imsi: string,
    },
  },
  ATTACH_TO_EMAIL: {
    id: string,
    type: "ATTACH_TO_EMAIL",
    payload: void,
  },
  SET_TITLE: {
    id: string,
    type: "SET_TITLE",
    payload: void,
  },
  PAGE_LOADED: {
    id: string,
    type: "PAGE_LOADED",
    payload: void,
  },
  BRIDGE_READY: {
    id: string,
    type: "BRIDGE_READY",
    payload: void,
  },
  ALERT: {
    id: string,
    type: "ALERT",
    payload: void,
  },
  MESSAGE: {
    id: string,
    type: "MESSAGE",
    payload: void,
  },
  CONFIRM: {
    id: string,
    type: "CONFIRM",
    payload: {
      result: boolean,
    },
  },
  CREATE_CALENDAR_EVENT: {
    id: string,
    type: "CREATE_CALENDAR_EVENT",
    payload: void,
  },
  GET_CONTACT_DATA: {
    id: string,
    type: "GET_CONTACT_DATA",
    payload: {
      name?: string,
      email?: string,
      phoneNumber?: string,
      address?: {
        street?: string,
        city?: string,
        country?: string,
        postalCode?: string,
      },
    },
  },
  NAVIGATION_BAR: {
    id: string,
    type: "NAVIGATION_BAR",
    payload: void,
  },
  SHARE: {
    id: string,
    type: "SHARE",
    payload: void,
  },
  ERROR: {
    id: string,
    type: "ERROR",
    payload: {
      code: number,
      reason: string,
    },
  },
  GET_REMOTE_CONFIG: {
    id: string,
    type: "GET_REMOTE_CONFIG",
    payload: {
      result: {
        [s: string]: string,
      },
    },
  },
  STATUS_REPORT: {
    id: string,
    type: "STATUS_REPORT",
    payload: void,
  },
  FETCH: {
    id: string,
    type: "FETCH",
    payload: {
      status: number,
      headers: {
        [key: string]: string,
      },
      body: string,
    },
  },
  OS_PERMISSION_STATUS: {
    id: string,
    type: "OS_PERMISSION_STATUS",
    payload: {
      granted: boolean,
    },
  },
  INTERNAL_NAVIGATION: {
    type: "INTERNAL_NAVIGATION",
    id: string,
    payload: void,
  },
  DISMISS: {
    type: "DISMISS",
    id: string,
    payload: void,
  },
  VIBRATION: {
    type: "VIBRATION",
    id: string,
    payload: void,
  },
  FETCH_CONTACTS_DATA: {
    id: string,
    type: "FETCH_CONTACTS_DATA",
    payload: Array<{
      phoneNumber: string,
      firstName?: string,
      middleName?: string,
      lastName?: string,
      encodedAvatar?: string,
    }>,
  },
  RENEW_SESSION: {
    type: "RENEW_SESSION",
    id: string,
    payload: {
      accessToken: string,
    },
  },
  GET_APP_METADATA: {
    type: "GET_APP_METADATA",
    id: string,
    payload: {
      isInstalled: boolean,
      marketUrl: string,
      appUrl: string,
    },
  },
  SET_CUSTOMER_HASH: {
    type: "SET_CUSTOMER_HASH",
    id: string,
    payload: void,
  },
  GET_CUSTOMER_HASH: {
    type: "GET_CUSTOMER_HASH",
    id: string,
    payload: {
      hash: string,
    },
  },
  GET_DISK_SPACE_INFO: {
    type: "GET_DISK_SPACE_INFO",
    id: string,
    payload: {
      availableBytes: number,
      totalBytes: number,
    },
  },
  GET_ESIM_INFO: {
    type: "GET_ESIM_INFO",
    id: string,
    payload: {
      supportsEsim: boolean,
    },
  },
  SET_TRACKING_PROPERTY: {
    type: "SET_TRACKING_PROPERTY",
    id: string,
    payload: void,
  },
  SET_ACTION_BEHAVIOR: {
    type: "SET_ACTION_BEHAVIOR",
    id: string,
    payload: void,
  },
  HIGHLIGHT_TAB: {
    type: "HIGHLIGHT_TAB",
    id: string,
    payload: void,
  },
  GET_TOPAZ_TOKEN: {
    type: "GET_TOPAZ_TOKEN",
    id: string,
    payload: {
      token: string,
    },
  },
  LOG_OUT: {
    type: "LOG_OUT",
    id: string,
    payload: void,
  },
  SHOW_APP_RATING: {
    type: "SHOW_APP_RATING",
    id: string,
    payload: void,
  },
  SHEET: {
    type: "SHEET",
    id: string,
    payload: SheetResponse,
  },
  FETCH_PHONE_NUMBERS: {
    type: "FETCH_PHONE_NUMBERS",
    id: string,
    payload: Array<{
      id: string,
      value: string,
    }>,
  },
  UPDATE_PHONE_NUMBERS: {
    type: "UPDATE_PHONE_NUMBERS",
    id: string,
    payload: void,
  },
};
export type NativeAppResponsePayload<Type: $Keys<ResponsesFromNativeApp>> =
  $PropertyType<$ElementType<ResponsesFromNativeApp, Type>, "payload">;
declare type NativeAppRequestPayload<Type: $Keys<RequestsFromNativeApp>> =
  $PropertyType<$ElementType<RequestsFromNativeApp, Type>, "payload">;
declare var log: void | ((...args: Array<any>) => void);
declare export var setLogger: (logger: typeof log) => void;
/**
 * Returns true if there is a WebView Bridge installed
 */
declare export var isWebViewBridgeAvailable: () => boolean;
/**
 * Send message to native app and waits for response
 */
declare export var postMessageToNativeApp: <T: $Keys<ResponsesFromNativeApp>>(
  x: {
    type: T,
    id?: string | void,
    payload?: Object | void,
  },
  timeout?: number | void
) => Promise<NativeAppResponsePayload<T>>;
export type NativeEventHandler = (x: {
  event: string,
}) => {
  action: "default",
};
declare export var listenToNativeMessage: <T: $Keys<RequestsFromNativeApp>>(
  type: T,
  handler: (
    payload: NativeAppRequestPayload<T>
  ) => Object | void | Promise<Object>
) => () => void;
declare export var onNativeEvent: (
  eventHandler: NativeEventHandler
) => () => void;
declare export var onSessionRenewal: (
  handler: (payload: {
    accessToken: string,
  }) => void
) => () => void;
declare export {};
