// @flow

import {NativeAppResponsePayload} from './post-message';
declare export var attachToEmail: (x: {
    url: string,
    subject?: string | void,
    fileName: string,
    recipient?: string | void,
    body?: string | void,
}) => Promise<void>;
declare type ShareOptions =
    | {
          text: string,
      }
    | {
          url: string,
          fileName: string,
          text?: string,
      };
declare export var share: (options: ShareOptions) => Promise<void>;
declare export var updateNavigationBar: (x: {
    title?: string | void,
    expandedTitle?: string | void,
    showBackButton?: boolean | void,
    showReloadButton?: boolean | void,
    showProfileButton?: boolean | void,
    backgroundColor?: string | void,
}) => Promise<void>;
/**
 * @deprecated
 */
declare export var setWebViewTitle: (title: string) => Promise<void>;
declare export var notifyPageLoaded: () => Promise<void>;
declare export var isABTestingAvailable: (key: string) => Promise<boolean>;
declare export var reportStatus: (x: {
    feature: 'ACCOUNT',
    status: 'CRITICAL' | 'GOOD' | 'BAD',
    reason: string,
}) => Promise<NativeAppResponsePayload<'STATUS_REPORT'>>;
declare export var fetch: (x: {
    url: string,
    method: 'GET' | 'POST',
    headers: {
        [key: string]: string,
    },
    body: string,
}) => Promise<NativeAppResponsePayload<'FETCH'>>;
declare type PermissionsStatus = 'notifications';
declare export var checkPermissionStatus: (
    feature: PermissionsStatus,
    params?: {
        [key: string]: string,
    } | void,
) => Promise<boolean>;
declare export var getAppMetadata: (appToken: string) => Promise<{
    isInstalled: boolean,
    marketUrl: string,
    appUrl: string,
}>;
declare type ActionBehavior =
    | {
          behavior: 'confirm',
          title: string,
          message: string,
          acceptText: string,
          cancelText: string,
      }
    | {
          behavior: 'default',
      }
    | {
          behavior: 'cancel',
      };
declare export var setActionBehavior: (actions: {
    webviewClose?: ActionBehavior,
    navigationBack?: ActionBehavior,
}) => Promise<void>;
declare export {};
